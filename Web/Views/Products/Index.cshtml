@using PagedList.Mvc
@model PagedList.IPagedList<Web.Models.Product>

@{
    ViewBag.Title = "Index";

    string currentFilter = ViewBag.CurrentFilter;
    string currentSort = ViewBag.CurrentSort;
    if (string.IsNullOrEmpty(currentSort))
    {
        currentSort = "OrderDate_desc";
    }
}

<div class="custom-header">
    <h3>All Items</h3>
    <hr />
</div>

<form asp-action="Index" method="get">

    <div class="row">
        <div class="col-sm-1">
            <h4>Filter</h4>
        </div>
        <div class="col-sm-3">Product: @Html.TextBox("product", ViewBag.ProductFilter as string, new { @class = "form-control" })  </div>
        <div class="col-sm-3">
            Category:
            @Html.DropDownList("category", new SelectList(ViewBag.CategoryItems, "Value", "Text"), "- Please Select -", new { @class = "form-control" })
        </div>
        <div class="col-sm-5" style="margin-top:20px">
            <button type="submit" value="search" class="btn btn-primary">
                <span class="glyphicon glyphicon-search"></span> Search
            </button>
        </div>
    </div>
</form>
<hr />

<div style="margin-bottom:5px">
    <a href="@Url.Action("Create")" class="btn  btn-primary">
        <span class="glyphicon glyphicon-plus"></span> Create New
    </a>
</div>
<div style="overflow:auto">


    <table class="table">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.First().Name)
            </th>

            <th>
                @Html.DisplayNameFor(model => model.First().InventoryOnHand)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().InventoryToCome)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().InventoryToGo)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().ToOrder)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().InventoryValue)
            </th>
            <th></th>
        </tr>

        @foreach (var item in Model) {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>

                <td>
                    @Html.DisplayFor(modelItem => item.InventoryOnHand)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.InventoryToCome)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.InventoryToGo)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ToOrder)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.InventoryValue)
                </td>
                <td>
                    <span style="white-space:nowrap">@Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
                    @Html.ActionLink("Details", "Details", new { id = item.Id }) |
                    @Html.ActionLink("Delete", "Delete", new { id = item.Id })</span>
                </td>
            </tr>
        }

    </table>
    <div class="pager">
        @Html.PagedListPager(Model, page => Url.Action("Index", new
                       {
                           page,
                           sortOrder = ViewBag.currentSort,
                           product = ViewBag.ProductFilter,
                           category = ViewBag.CategoryFilter
                       }))
        Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
    </div>
</div>