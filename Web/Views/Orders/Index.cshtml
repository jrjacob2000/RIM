@using PagedList.Mvc
@model PagedList.IPagedList<Web.Models.Order>

@{
    ViewBag.Title = "Orders";

    string currentFilter = ViewBag.CurrentFilter;
    string currentSort = ViewBag.CurrentSort;
    if (string.IsNullOrEmpty(currentSort))
    {
        currentSort = "OrderDate_desc";
    }
}

@*<h2>List</h2>*@
@if (ViewBag.OrderType == Helper.Constants.OrderType.PURCHASE)
{
    <h3>All Purchase Orders</h3>
}
else if (ViewBag.OrderType == Helper.Constants.OrderType.SALE)
{
    <h3>All Sales Orders</h3>
}
else if (ViewBag.OrderType == Helper.Constants.OrderType.ADJUST)
{
    <h3>All Adjustment</h3>
}

@*<hr />
    <form asp-action="Index" method="get">

        <div style="display:flex; flex-direction: row; justify-content:flex-start; align-items:center">
            <div style="margin-right:10px">
                <h4>Filter:</h4>
            </div>
            <div style="padding-right:5px">Order Type: </div>
            <div style="margin-right:10px">
                @Html.DropDownList("orderType", new SelectList(ViewBag.OrderTypes, "Value", "Text"), "- Please Select -", new { @class = "form-control" })
            </div>
            <input type="submit" value="search" class="btn btn-default" />
        </div>
    </form>*@
<hr />

@if (TempData["SuccessMessage"] != null)
{
<div class="alert alert-success">
    <button type="button" class="close" data-dismiss="alert">×</button>
    @TempData["SuccessMessage"]
</div>
}

<div style="margin-bottom:5px">
    <a href="@Url.Action("Create",new { orderType = ViewBag.OrderType})" class="btn  btn-primary">
        <span class="glyphicon glyphicon-plus"></span> Create New
    </a>
</div>

@if (Model != null)
{

    <div style="overflow:auto">
        <table class="table">
            <tr>
                <th>
                    @Html.ActionLink("Date", "Index", Request.QueryString.ToRouteValueDictionary("sortOrder", (string)ViewBag.OrderDateSortParam))
                    @Html.SortIdentifier(currentSort, "OrderDate")
                </th>
                <th>
                    @{
                        var orderNumColName = "OrderNumber";
                        if (ViewBag.OrderType == Helper.Constants.OrderType.ADJUST)
                        {
                            orderNumColName = "Adjust Number";
                        }
                    }
                    @Html.ActionLink(@orderNumColName, "Index", Request.QueryString.ToRouteValueDictionary("sortOrder", (string)ViewBag.OrderNumberSortParam))
                    @Html.SortIdentifier(currentSort, @orderNumColName)
                </th>

                @if (ViewBag.OrderType != Helper.Constants.OrderType.ADJUST)
                {
                    <th>
                        @Html.ActionLink("Expected Date", "Index", Request.QueryString.ToRouteValueDictionary("sortOrder", (string)ViewBag.ExpectedDateSortParam))
                        @Html.SortIdentifier(currentSort, "ExpectedDate")
                    </th>

                    <th>
                        @Html.ActionLink("Partner", "Index", Request.QueryString.ToRouteValueDictionary("sortOrder", (string)ViewBag.PartnerSortParam))
                        @Html.SortIdentifier(currentSort, "Partner")
                    </th>

                }
                else
                {
                    <th>
                        @Html.ActionLink("Reason", "Index", Request.QueryString.ToRouteValueDictionary("sortOrder", (string)ViewBag.ReasonSortParam))
                        @Html.SortIdentifier(currentSort, "Reason")
                    </th>
                }
                <th>
                    Amount
                </th>
                @if (ViewBag.OrderType == Helper.Constants.OrderType.SALE)
                {
                    <th>
                        <span>Invoiced</span>
                        @*@Html.DisplayNameFor(model => model.InvoiceNumber)*@
                    </th>
                }
                else if (ViewBag.OrderType == Helper.Constants.OrderType.PURCHASE)
                {
                    <th>
                        <span>Billed</span>
                    </th>
                }
                <th></th>
            </tr>

            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.OrderDate)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.OrderNumber)
                    </td>

                    @if (Model.FirstOrDefault().OrderType != Helper.Constants.OrderType.ADJUST)
                    {
                        <td>
                            @Html.DisplayFor(modelItem => item.ExpectedDate)
                        </td>

                        <td>
                            @Html.DisplayFor(modelItem => item.Partner.Name)
                        </td>
                    }
                    else
                    {
                        <td>
                            @Html.DisplayFor(modelItem => item.AdjustmentReason)
                        </td>
                    }
                    <td>
                        &#8369  @Html.DisplayFor(modelItem => item.Amount)
                    </td>
                    @if (ViewBag.OrderType != Helper.Constants.OrderType.ADJUST)
                    {
                        <td>
                            @if (item.OrderType == Helper.Constants.OrderType.SALE || item.OrderType == Helper.Constants.OrderType.PURCHASE)
                            {
                                if (item.Invoices.Count() > 0)
                                {
                                    <i class="fa fa-circle" style="color:green"></i>
                                }
                                else
                                {
                                    <i class="fa fa-circle" style="color:lightgrey"></i>
                                }
                            }
                        </td>
                    }
                    <td>
                        <span style="white-space:nowrap">
                            @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
                        @if (ViewBag.OrderType == Helper.Constants.OrderType.ADJUST)
                        {
                            @Html.ActionLink("Details", "AdjustDetails", new { id = item.Id })

                        }
                        else
                        {
                            @Html.ActionLink("Details", "Details", new { id = item.Id })
                        }
                        |
                        @Html.ActionLink("Delete", "Delete", new { id = item.Id })
                    </span>

                </td>
            </tr>
        }

        </table>
        <div class="pager">
            @Html.PagedListPager(Model, page => Url.Action("Index", new
                           {
                               page,
                               sortOrder = ViewBag.currentSort,
                               orderType = Model.FirstOrDefault().OrderType
                           }))
            Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount
        </div>
    </div>
}
<script type="text/javascript">
    var token = sessionStorage.getItem("tokenKey");
    var headers = {};
    if (token) {
        headers.Authorization = 'Bearer ' + token;
    }

</script>
