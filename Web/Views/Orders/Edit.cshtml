@model Web.Models.Order

@{
    ViewBag.Title = "Edit";
}

@if (Model.OrderType == Web.Controllers.Helper.Constants.OrderType.PURCHASE)
{
    <h2>Edit Purchase Order -  @Model.OrderNumber</h2>
}
else if (Model.OrderType == Web.Controllers.Helper.Constants.OrderType.SALE)
{
    <h2>Edit Sales Order -  @Model.OrderNumber</h2>
}
else if (Model.OrderType == Web.Controllers.Helper.Constants.OrderType.ADJUST)
{
    <h2>Edit Adjustment -  @Model.OrderNumber</h2>
    <p>Adjust item quantity for any damages or lost</p>
    
}
else if (Model.OrderType == Web.Controllers.Helper.Constants.OrderType.CUSTOMER_RETURN)
{
    <h2>Edit Return -  @Model.OrderNumber</h2>
}
else if (Model.OrderType == Web.Controllers.Helper.Constants.OrderType.SUPPLIER_RETURN)
{
    <h2>Edit Return -  @Model.OrderNumber</h2>
}


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
       
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model => model.OrderType)
        @Html.HiddenFor(model => model.OrderNumber)

        @*<div class="form-group">
            @Html.LabelFor(model => model.OrderType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.OrderType, new SelectList(ViewBag.OrderTypes, "Value", "Text"), "- Please Select -", new { @class = "form-control", @disabled = "disabled" })
                @Html.ValidationMessageFor(model => model.OrderType, "", new { @class = "text-danger" })
            </div>
        </div>*@

        <div class="form-group">
            @if (Model.OrderType == Web.Controllers.Helper.Constants.OrderType.ADJUST)
            {
                @Html.Label("Adjust Number", htmlAttributes: new { @class = "control-label col-md-2" })
            }           
            else
            {
                @Html.LabelFor(model => model.OrderNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            }
            <div class="col-md-10">
                @Html.EditorFor(model => model.OrderNumber, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                @Html.ValidationMessageFor(model => model.OrderNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @if (Model.OrderType == Web.Controllers.Helper.Constants.OrderType.ADJUST)
             {
                @Html.Label("Adjust Date", htmlAttributes: new { @class = "control-label col-md-2" })
             }
            else
            {
                @Html.LabelFor(model => model.OrderDate, htmlAttributes: new { @class = "control-label col-md-2" })
            }
            <div class="col-md-10">
                @Html.EditorFor(model => model.OrderDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.OrderDate, "", new { @class = "text-danger" })
            </div>
        </div>

        @if (Model.OrderType != Web.Controllers.Helper.Constants.OrderType.ADJUST)
        {
        <div class="form-group">
            @Html.LabelFor(model => model.ExpectedDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ExpectedDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ExpectedDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Partner, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Partner_Id, new SelectList(ViewBag.Partners, "Value", "Text"), "- Please Select -", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Partner, "", new { @class = "text-danger" })
            </div>
        </div>
        
        <div class="form-group">
            @Html.LabelFor(model => model.OtherCharges, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.OtherCharges, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.OtherCharges, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.OrderDiscount, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.OrderDiscount, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.OrderDiscount, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TaxRate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TaxRate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TaxRate, "", new { @class = "text-danger" })
            </div>
        </div>
        }
        <div class="form-group">
            @if (Model.OrderType == Web.Controllers.Helper.Constants.OrderType.ADJUST)
            {

                @Html.LabelFor(model => model.AdjustmentReason, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.AdjustmentReason, new SelectList(ViewBag.AdjustmentReasons, "Value", "Text"), "- Please Select -", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.AdjustmentReason, "", new { @class = "text-danger" })
                </div>
                
            }
            else
            {
                    @Html.LabelFor(model => model.OrderNotes, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.OrderNotes, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.OrderNotes, "", new { @class = "text-danger" })
                    </div>
                
            }
            
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index", new { orderType = @Model.OrderType })
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
