@model Web.Models.Order

@{
    ViewBag.Title = "Edit";
    List<SelectListItem> statusList = new List<SelectListItem>();
}

@using (Html.BeginForm())
{

    <div class="row">

        <div class="col-md-6">

            @if (Model.OrderType == Helper.Constants.OrderType.PURCHASE)
            {
                <h3>Edit Purchase Order -  @Model.OrderNumber</h3>
                statusList = Enum.GetValues(typeof(Helper.OrderStatus))
                    .Cast<Helper.OrderStatus>()
                     .Where(x => x != Helper.OrderStatus.Confirmed && x != Helper.OrderStatus.Closed)
                    .Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }).ToList();
            }
            else if (Model.OrderType == Helper.Constants.OrderType.SALE)
            {
                <h3>Edit Sales Order -  @Model.OrderNumber</h3>
                statusList = Enum.GetValues(typeof(Helper.OrderStatus))
                    .Cast<Helper.OrderStatus>()
                    .Where(x => x != Helper.OrderStatus.Received && x != Helper.OrderStatus.Issued)
                    .Select(x => new SelectListItem { Text = x.ToString(), Value = ((int)x).ToString() }).ToList();
            }
            else if (Model.OrderType == Helper.Constants.OrderType.ADJUST)
            {
                <h3>Edit Adjustment -  @Model.OrderNumber</h3>
            }
        </div>
        <div class="col-md-6">
            <h1>
                <div class="pull-right">
                    <button type="submit" class="btn btn-primary">
                        <span class="glyphicon glyphicon-floppy-disk"></span>
                        Save
                    </button>
                    @*<a href="@TempData["UrlReferrer"]" class="btn  btn-primary" title="Back to detail view">
                            <span class="glyphicon glyphicon-arrow-left"></span> Back
                        </a>*@
                </div>
            </h1>
        </div>

    </div>


    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        <hr />

        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model => model.OrderType)
        @Html.HiddenFor(model => model.OrderNumber)

        @if (ViewData.ModelState[""] != null && ViewData.ModelState[""].Errors.Count() > 0)
        {
            <div class="alert alert-danger">
                <button type="button" class="close" data-dismiss="alert">×</button>
                @Html.ValidationSummary(false, "")
            </div>
        }

        @*<div class="form-group">
                @Html.LabelFor(model => model.OrderType, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.OrderType, new SelectList(ViewBag.OrderTypes, "Value", "Text"), "- Please Select -", new { @class = "form-control", @disabled = "disabled" })
                    @Html.ValidationMessageFor(model => model.OrderType, "", new { @class = "text-danger" })
                </div>
            </div>*@

        <div class="form-group">
            @if (Model.OrderType == Helper.Constants.OrderType.ADJUST)
            {
                @Html.Label("Adjust Number", htmlAttributes: new { @class = "control-label col-md-2" })
            }
            else
            {
                @Html.LabelFor(model => model.OrderNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            }
            <div class="col-md-10">
                @Html.EditorFor(model => model.OrderNumber, new { htmlAttributes = new { @class = "form-control", @disabled = "disabled" } })
                @Html.ValidationMessageFor(model => model.OrderNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @if (Model.OrderType == Helper.Constants.OrderType.ADJUST)
            {
                @Html.Label("Adjust Date", htmlAttributes: new { @class = "control-label col-md-2" })
            }
            else
            {
                @Html.LabelFor(model => model.OrderDate, htmlAttributes: new { @class = "control-label col-md-2" })
            }
            <div class="col-md-10">
                @Html.EditorFor(model => model.OrderDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.OrderDate, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Partner, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Partner_Id, new SelectList(ViewBag.Partners, "Value", "Text"), "- Please Select -", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Partner, "", new { @class = "text-danger" })
            </div>
        </div>

        @if (Model.OrderType != Helper.Constants.OrderType.ADJUST)
        {
            <div class="form-group">
                @Html.LabelFor(model => model.ExpectedDate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ExpectedDate, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ExpectedDate, "", new { @class = "text-danger" })
                </div>
            </div>



            <div class="form-group">
                @Html.LabelFor(model => model.OtherCharges, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.OtherCharges, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.OtherCharges, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.OrderDiscount, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.OrderDiscount, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.OrderDiscount, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.TaxRate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.TaxRate, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.TaxRate, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.Status, new SelectList(statusList, "Value", "Text"), "- Please Select -", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })

                </div>
            </div>
        }
        <div class="form-group">
            @if (Model.OrderType == Helper.Constants.OrderType.ADJUST)
            {

                @Html.LabelFor(model => model.AdjustmentReason, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.AdjustmentReason, new SelectList(ViewBag.AdjustmentReasons, "Value", "Text"), "- Please Select -", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.AdjustmentReason, "", new { @class = "text-danger" })
                </div>

            }
            else
            {
                @Html.LabelFor(model => model.OrderNotes, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.OrderNotes, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.OrderNotes, "", new { @class = "text-danger" })
                </div>

            }

        </div>

    </div>
}



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
