@model Web.Models.Order

@{
    ViewBag.Title = "Create";
}



@if (Model.OrderType == Web.Controllers.Helper.Constants.OrderType.PURCHASE)
{
    <h2>Create New Purchase Order</h2>
}
else if (Model.OrderType == Web.Controllers.Helper.Constants.OrderType.SALE)
{
    <h2>Create New Sales Order</h2>
}
else if (Model.OrderType == Web.Controllers.Helper.Constants.OrderType.ADJUST)
{
    <h2>Create New Adjustment</h2>
}

@using (Html.BeginForm())
{    
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.OrderType)

    <div class="form-horizontal">     
        <hr />             
        
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @*<div class="form-group">
            @Html.LabelFor(model => model.OrderType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">                
                @Html.DropDownListFor(model => model.OrderType, new SelectList(ViewBag.OrderTypes, "Value", "Text"), "- Please Select -", new { @class = "form-control", @onchange = "OrderTypeChange(this.value)" })
                @Html.ValidationMessageFor(model => model.OrderType, "", new { @class = "text-danger" })
            </div>
        </div>*@

        <div class="form-group">
            @if (Model.OrderType == Web.Controllers.Helper.Constants.OrderType.ADJUST)
            { 
                @Html.Label("Adjust Number", htmlAttributes: new { @class = "control-label col-md-2" })
            }
            else
            { 
                @Html.LabelFor(model => model.OrderNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            }
            <div class="col-md-10">
                @Html.EditorFor(model => model.OrderNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.OrderNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @if (Model.OrderType == Web.Controllers.Helper.Constants.OrderType.ADJUST)
            {
                @Html.Label("Adjust Date", htmlAttributes: new { @class = "control-label col-md-2" })
            }
            else
            {
                @Html.LabelFor(model => model.OrderDate, htmlAttributes: new { @class = "control-label col-md-2" })
            }
            
            <div class="col-md-10">
                @Html.EditorFor(model => model.OrderDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.OrderDate, "", new { @class = "text-danger" })
            </div>
        </div>

        @if (Model.OrderType != Web.Controllers.Helper.Constants.OrderType.ADJUST)
        { 
                <div class="form-group">
                    @Html.LabelFor(model => model.ExpectedDate, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.ExpectedDate, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ExpectedDate, "", new { @class = "text-danger" })
                    </div>
                </div>
        
                <div class="form-group">
                    @Html.LabelFor(model => model.Partner, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.Partner_Id, new SelectList(ViewBag.Partners, "Value", "Text"), "- Please Select -", new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Partner_Id, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.OtherCharges, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.OtherCharges, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.OtherCharges, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.OrderDiscount, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.OrderDiscount, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.OrderDiscount, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.TaxRate, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.TaxRate, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.TaxRate, "", new { @class = "text-danger" })
                    </div>
                </div>
        }
        
        <div class="form-group">
            @if (Model.OrderType == Web.Controllers.Helper.Constants.OrderType.ADJUST)
            { 
                @Html.Label("Adjust Reason", htmlAttributes: new { @class = "control-label col-md-2" })
            }
            else
            {
                @Html.LabelFor(model => model.OrderNotes, htmlAttributes: new { @class = "control-label col-md-2" })
            }            
            <div class="col-md-10">
                @Html.EditorFor(model => model.OrderNotes, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.OrderNotes, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index", new { orderType = @Model.OrderType })
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script type="text/javascript">

    function GetOrderType() {
        if ($('#OrderType').val() != "") {
            $.ajax({
                type: 'GET',
                url: "@Url.Action("Create", Url.RequestContext.RouteData.Values)" + "?orderType=" + $("#OrderType").val(),
                data: "{}",
                success: function (view) {
                    $('#OrderNumber').val(view);
                    alert('');
                },
                error: function () {
                    alert("error");
                }
            });
        }
    }

    function OrderTypeChange(value) {
        var url = '/Orders/Create?IdToCopy=@ViewBag.IdToCopy&orderType='+ value;
        document.location.href = url;
    }
</script>