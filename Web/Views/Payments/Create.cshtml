@model Web.Models.Payment

@{
    ViewBag.Title = "Create";
}
@{
    string showDetail = "hidden";
    string listTitle = "";
    if (Model.PaymentDetails.Count > 0)
    {
        showDetail = "visible";
    }

}



<div class="custom-header">
    <div class="row" style="margin-top:0px">
        <div class="col-md-6">
            @if (Model.Type == Helper.Constants.PaymentType.RECIEVE)
            {
                listTitle = "Unpaid Invoices";
                <h3 style="float:left">Record Payment Receive</h3>
            }
            else if (Model.Type == Helper.Constants.PaymentType.REFUND)
            {
                listTitle = "Unpaid Credit Notes";
                <h3 style="float:left">Refund Customer</h3>
            }
            else if (Model.Type == Helper.Constants.PaymentType.BILL)
            {
                listTitle = "Unpaid Bills";
                <h3 style="float:left">Pay Bill</h3>
            }
        </div>
        <div class="col-md-6">
            <span class="pull-right">
                @if (!(ViewData.ModelState[""] != null && ViewData.ModelState[""].Errors.Count() > 0))
                {
                    <span>
                        <button type="submit" value="Save" form="paymentForm" class="btn btn-primary">
                            <span class="glyphicon glyphicon-floppy-disk"></span> Save
                        </button>
                    </span>

                }
                <a href="@Request.UrlReferrer" id="cancel" name="cancel" class="btn btn-default">
                    <span class="glyphicon glyphicon-ban-circle"></span>
                    Cancel
                </a>

            </span>
        </div>
    </div>
    <hr />
</div>

@if (ViewData.ModelState[""] != null && ViewData.ModelState[""].Errors.Count() > 0)
{
    <div class="alert alert-danger">
        <a class="close" data-dismiss="alert">×</a>
        @Html.ValidationSummary(true)
    </div>
}

@*@using (Html.BeginForm("Create", "Payments", FormMethod.Get))
    {
        @Html.HiddenFor(model => model.Type)
        @Html.HiddenFor(model => model.Partner_Id)
        <div class="form-horizontal">
            <div class="form-group">
                @Html.Label("Customer", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <table>
                        <tr>
                            <td style="width:280px">@Html.DropDownListFor(model => model.Partner_Id, new SelectList(ViewBag.Partners, "Value", "Text"), "- Please Select -", new { @class = "form-control" })</td>
                            <td><input type="submit" value="Search" class="btn btn-primary" /></td>
                        </tr>
                    </table>
                </div>

            </div>
        </div>
    }*@

@*<div class="form-horizontal">
        <div class="form-group">
            <div class="col-md-12" style="text-align:center">
                <p>@ViewBag.Message</p>
            </div>
        </div>
    </div>*@

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "paymentForm", @class = @showDetail }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.Partner_Id)
    @Html.HiddenFor(model => model.Type)

    <div class="form-horizontal">
        <div class="form-group">
            @Html.LabelFor(model => model.Reference, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Reference, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Reference, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Date, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Date, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <hr />
    <h4>@listTitle</h4>
    <table class="table">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.PaymentDetails.First().Invoice.InvoiceNumber)
            </th>
            <th>
                Invoice Amount
            </th>
            <th>
                Paid
            </th>
            <th>
                Outstanding
            </th>
            <th>
                Allocated
            </th>

        </tr>
        @{
            for (int i = 0; i < Model.PaymentDetails.Count(); i++)
            {
                @Html.HiddenFor(model => Model.PaymentDetails[i].Invoice_Id)
                <tr>
                    @*<td>@Model.PaymentDetails[i].Order.OrderNumber</td>*@
                    <td>@Model.PaymentDetails[i].Invoice.InvoiceNumber</td>
                    <td>@Model.PaymentDetails[i].Invoice.Amount</td>
                    <td>@Model.PaymentDetails[i].Invoice.PaidAmount</td>
                    <td>@Model.PaymentDetails[i].Invoice.Balance</td>
                    <td>@Html.EditorFor(model => Model.PaymentDetails[i].Amount)</td>
                </tr>
            }
        }

    </table>
}

<div>


</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
